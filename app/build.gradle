apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
android {
    compileSdkVersion extCompileSdkVersion
    buildToolsVersion extBuildToolsVersion
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    defaultConfig {
        applicationId "org.ionchain.wallet"
        minSdkVersion extMinSdkVersion
        targetSdkVersion extTargetSdkVersion
        versionCode appVersionCode
        versionName "${appVersionName}"//appVersionName
        multiDexEnabled true //需要将dex 分包  false 则不分
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }


    signingConfigs {
        key {
            try{
                storeFile file("ionchainwallet.keystore")//签名文件
                storePassword KEYSTORE_PASSWORD
                keyAlias "ionchain"
                keyPassword KEY_PASSWORD
                v2SigningEnabled false
            }  catch(ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }
    
    buildTypes {
        debug {
            signingConfig signingConfigs.key
            buildConfigField "String","URL_PROTOCOL_CN","\"${URL_PROTOCOL_CN}\""
            buildConfigField "String","URL_PROTOCOL_EN","\"${URL_PROTOCOL_EN}\""
            buildConfigField "String","URL_ABOUTUS_CN","\"${URL_ABOUTUS_CN}\""
            buildConfigField "String","URL_ABOUT_US_EN","\"${URL_ABOUT_US_EN}\""
//            buildConfigField("boolean","DEBUG","true")

        }
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.key
            buildConfigField "String","URL_PROTOCOL_CN","\"${URL_PROTOCOL_CN}\""
            buildConfigField "String","URL_PROTOCOL_EN","\"${URL_PROTOCOL_EN}\""
            buildConfigField "String","URL_ABOUTUS_CN","\"${URL_ABOUTUS_CN}\""
            buildConfigField "String","URL_ABOUT_US_EN","\"${URL_ABOUT_US_EN}\""
//            buildConfigField("boolean","DEBUG","false")
        }
    }

//    产品维度定义,此处定义一个渠道 channel
    flavorDimensions "channel"
    productFlavors {
        def appName = "IONChainWallet"
        def commonAppId = "org.ionchain.wallet"
        def appIdHuaWei = "org.ionchain.wallet.huawei"
        def appIdXiaoMi = "org.ionchain.wallet.xiaomi"
        IONChainWallet {
            dimension "channel"
            manifestPlaceholders.put("appId", commonAppId)
            manifestPlaceholders.put("file_paths", "@xml/file_paths")
            manifestPlaceholders.put("app_name", appName)
        }
        xiaomi {
            dimension "channel"
            applicationIdSuffix ".xiaomi"
            manifestPlaceholders.put("appId", appIdXiaoMi)
            manifestPlaceholders.put("file_paths", "@xml/file_paths")
            manifestPlaceholders.put("app_name", appName)
        }
        huawei {
            dimension "channel"
            applicationIdSuffix ".huawei"
            manifestPlaceholders.put("appId", appIdHuaWei)
            manifestPlaceholders.put("file_paths", "@xml/file_paths")
            manifestPlaceholders.put("app_name", appName)
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            variant.productFlavors.each { flavor ->
                def project = "ionchain"
                def separator = "_"
                def buildType = variant.variantData.variantConfiguration.buildType.name
                def versionName = variant.versionName
                def date = new Date()
                def formattedDate = date.format('yyyyMMdd')

                def apkName = flavor.name  + separator + "v" + versionName + separator + buildType+ ".apk"
                output.outputFileName = apkName
            }
        }
    }


    dexOptions {
        maxProcessCount 4 // this is the default value
        javaMaxHeapSize "4g"
    }

    lintOptions {
        // true--错误发生后停止gradle构建
        abortOnError false
        // true--只报告error
        ignoreWarnings false
        // true--所有warning当做error
        warningsAsErrors false
        disable 'GoogleAppIndexingWarning'
    }
    packagingOptions {
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixPatterns.gwt.xml'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixType.gwt.xml'
        exclude 'org/bitcoinj/crypto/mnemonic/wordlist/english.txt'
        exclude 'org/bitcoinj/crypto/cacerts'
    }

}

repositories {
    flatDir {
        dirs 'libs'
    }
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:recyclerview-v7:$extRecycleViewVersion"
    implementation "com.android.support:appcompat-v7:$extAppCompactVersion"
    implementation "com.android.support:design:$extDesignVersion"
    //    数据库查看（正式版要删除）
    implementation 'com.facebook.stetho:stetho:1.5.1'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'
    implementation 'com.android.support.constraint:constraint-layout:2.0.0-alpha5'
    //    网络请求框架
    implementation 'com.lzy.net:okgo:3.0.4'
    implementation 'com.lzy.net:okserver:2.0.5'
    //    下来刷新
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.5.1'
    //    适配器
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.35'
    //    动态权限申请
    implementation 'pub.devrel:easypermissions:2.0.0'
    //    图片加载
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation 'com.github.bumptech.glide:compiler:4.9.0'
    implementation 'com.github.bumptech.glide:annotations:4.9.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.31"
    implementation project(':ioncwalletsdk')
    implementation 'com.android.support:multidex:1.0.3'
}
