package org.ionc.wallet.greendaogen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.ionc.wallet.bean.CurrentPageNum;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CURRENT_PAGE_NUM".
*/
public class CurrentPageNumDao extends AbstractDao<CurrentPageNum, Long> {

    public static final String TABLENAME = "CURRENT_PAGE_NUM";

    /**
     * Properties of entity CurrentPageNum.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NumAll = new Property(1, String.class, "numAll", false, "NUM_ALL");
        public final static Property NumOut = new Property(2, String.class, "numOut", false, "NUM_OUT");
        public final static Property NumIn = new Property(3, String.class, "numIn", false, "NUM_IN");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
    }


    public CurrentPageNumDao(DaoConfig config) {
        super(config);
    }
    
    public CurrentPageNumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CURRENT_PAGE_NUM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NUM_ALL\" TEXT," + // 1: numAll
                "\"NUM_OUT\" TEXT," + // 2: numOut
                "\"NUM_IN\" TEXT," + // 3: numIn
                "\"ADDRESS\" TEXT);"); // 4: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CURRENT_PAGE_NUM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CurrentPageNum entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String numAll = entity.getNumAll();
        if (numAll != null) {
            stmt.bindString(2, numAll);
        }
 
        String numOut = entity.getNumOut();
        if (numOut != null) {
            stmt.bindString(3, numOut);
        }
 
        String numIn = entity.getNumIn();
        if (numIn != null) {
            stmt.bindString(4, numIn);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CurrentPageNum entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String numAll = entity.getNumAll();
        if (numAll != null) {
            stmt.bindString(2, numAll);
        }
 
        String numOut = entity.getNumOut();
        if (numOut != null) {
            stmt.bindString(3, numOut);
        }
 
        String numIn = entity.getNumIn();
        if (numIn != null) {
            stmt.bindString(4, numIn);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CurrentPageNum readEntity(Cursor cursor, int offset) {
        CurrentPageNum entity = new CurrentPageNum( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // numAll
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // numOut
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // numIn
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // address
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CurrentPageNum entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNumAll(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNumOut(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNumIn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CurrentPageNum entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CurrentPageNum entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CurrentPageNum entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
