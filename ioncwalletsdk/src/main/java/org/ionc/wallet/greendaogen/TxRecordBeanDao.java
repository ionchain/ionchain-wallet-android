package org.ionc.wallet.greendaogen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.ionc.wallet.bean.TxRecordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TX_RECORD_BEAN".
*/
public class TxRecordBeanDao extends AbstractDao<TxRecordBean, Long> {

    public static final String TABLENAME = "TX_RECORD_BEAN";

    /**
     * Properties of entity TxRecordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Hash = new Property(1, String.class, "hash", false, "HASH");
        public final static Property Nonce = new Property(2, String.class, "nonce", false, "NONCE");
        public final static Property BlockHash = new Property(3, String.class, "blockHash", false, "BLOCK_HASH");
        public final static Property BlockNumber = new Property(4, String.class, "blockNumber", false, "BLOCK_NUMBER");
        public final static Property TransactionIndex = new Property(5, String.class, "transactionIndex", false, "TRANSACTION_INDEX");
        public final static Property From = new Property(6, String.class, "from", false, "FROM");
        public final static Property To = new Property(7, String.class, "to", false, "TO");
        public final static Property Value = new Property(8, String.class, "value", false, "VALUE");
        public final static Property GasPrice = new Property(9, String.class, "gasPrice", false, "GAS_PRICE");
        public final static Property Gas = new Property(10, String.class, "gas", false, "GAS");
        public final static Property Input = new Property(11, String.class, "input", false, "INPUT");
        public final static Property Creates = new Property(12, String.class, "creates", false, "CREATES");
        public final static Property PublicKey = new Property(13, String.class, "publicKey", false, "PUBLIC_KEY");
        public final static Property Raw = new Property(14, String.class, "raw", false, "RAW");
        public final static Property R = new Property(15, String.class, "r", false, "R");
        public final static Property S = new Property(16, String.class, "s", false, "S");
        public final static Property V = new Property(17, Integer.class, "v", false, "V");
        public final static Property Tc_in_out = new Property(18, String.class, "tc_in_out", false, "TC_IN_OUT");
    }


    public TxRecordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TxRecordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TX_RECORD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"HASH\" TEXT," + // 1: hash
                "\"NONCE\" TEXT," + // 2: nonce
                "\"BLOCK_HASH\" TEXT," + // 3: blockHash
                "\"BLOCK_NUMBER\" TEXT," + // 4: blockNumber
                "\"TRANSACTION_INDEX\" TEXT," + // 5: transactionIndex
                "\"FROM\" TEXT," + // 6: from
                "\"TO\" TEXT," + // 7: to
                "\"VALUE\" TEXT," + // 8: value
                "\"GAS_PRICE\" TEXT," + // 9: gasPrice
                "\"GAS\" TEXT," + // 10: gas
                "\"INPUT\" TEXT," + // 11: input
                "\"CREATES\" TEXT," + // 12: creates
                "\"PUBLIC_KEY\" TEXT," + // 13: publicKey
                "\"RAW\" TEXT," + // 14: raw
                "\"R\" TEXT," + // 15: r
                "\"S\" TEXT," + // 16: s
                "\"V\" INTEGER," + // 17: v
                "\"TC_IN_OUT\" TEXT);"); // 18: tc_in_out
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TX_RECORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TxRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(2, hash);
        }
 
        String nonce = entity.getNonce();
        if (nonce != null) {
            stmt.bindString(3, nonce);
        }
 
        String blockHash = entity.getBlockHash();
        if (blockHash != null) {
            stmt.bindString(4, blockHash);
        }
 
        String blockNumber = entity.getBlockNumber();
        if (blockNumber != null) {
            stmt.bindString(5, blockNumber);
        }
 
        String transactionIndex = entity.getTransactionIndex();
        if (transactionIndex != null) {
            stmt.bindString(6, transactionIndex);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(8, to);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(9, value);
        }
 
        String gasPrice = entity.getGasPrice();
        if (gasPrice != null) {
            stmt.bindString(10, gasPrice);
        }
 
        String gas = entity.getGas();
        if (gas != null) {
            stmt.bindString(11, gas);
        }
 
        String input = entity.getInput();
        if (input != null) {
            stmt.bindString(12, input);
        }
 
        String creates = entity.getCreates();
        if (creates != null) {
            stmt.bindString(13, creates);
        }
 
        String publicKey = entity.getPublicKey();
        if (publicKey != null) {
            stmt.bindString(14, publicKey);
        }
 
        String raw = entity.getRaw();
        if (raw != null) {
            stmt.bindString(15, raw);
        }
 
        String r = entity.getR();
        if (r != null) {
            stmt.bindString(16, r);
        }
 
        String s = entity.getS();
        if (s != null) {
            stmt.bindString(17, s);
        }
 
        Integer v = entity.getV();
        if (v != null) {
            stmt.bindLong(18, v);
        }
 
        String tc_in_out = entity.getTc_in_out();
        if (tc_in_out != null) {
            stmt.bindString(19, tc_in_out);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TxRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(2, hash);
        }
 
        String nonce = entity.getNonce();
        if (nonce != null) {
            stmt.bindString(3, nonce);
        }
 
        String blockHash = entity.getBlockHash();
        if (blockHash != null) {
            stmt.bindString(4, blockHash);
        }
 
        String blockNumber = entity.getBlockNumber();
        if (blockNumber != null) {
            stmt.bindString(5, blockNumber);
        }
 
        String transactionIndex = entity.getTransactionIndex();
        if (transactionIndex != null) {
            stmt.bindString(6, transactionIndex);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(8, to);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(9, value);
        }
 
        String gasPrice = entity.getGasPrice();
        if (gasPrice != null) {
            stmt.bindString(10, gasPrice);
        }
 
        String gas = entity.getGas();
        if (gas != null) {
            stmt.bindString(11, gas);
        }
 
        String input = entity.getInput();
        if (input != null) {
            stmt.bindString(12, input);
        }
 
        String creates = entity.getCreates();
        if (creates != null) {
            stmt.bindString(13, creates);
        }
 
        String publicKey = entity.getPublicKey();
        if (publicKey != null) {
            stmt.bindString(14, publicKey);
        }
 
        String raw = entity.getRaw();
        if (raw != null) {
            stmt.bindString(15, raw);
        }
 
        String r = entity.getR();
        if (r != null) {
            stmt.bindString(16, r);
        }
 
        String s = entity.getS();
        if (s != null) {
            stmt.bindString(17, s);
        }
 
        Integer v = entity.getV();
        if (v != null) {
            stmt.bindLong(18, v);
        }
 
        String tc_in_out = entity.getTc_in_out();
        if (tc_in_out != null) {
            stmt.bindString(19, tc_in_out);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TxRecordBean readEntity(Cursor cursor, int offset) {
        TxRecordBean entity = new TxRecordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // hash
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nonce
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // blockHash
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // blockNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // transactionIndex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // from
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // to
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // value
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // gasPrice
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // gas
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // input
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // creates
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // publicKey
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // raw
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // r
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // s
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // v
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // tc_in_out
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TxRecordBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHash(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNonce(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBlockHash(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBlockNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTransactionIndex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFrom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setValue(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGasPrice(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGas(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setInput(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreates(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPublicKey(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRaw(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setR(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setS(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setV(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setTc_in_out(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TxRecordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TxRecordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TxRecordBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
